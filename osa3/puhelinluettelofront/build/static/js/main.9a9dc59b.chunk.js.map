{"version":3,"sources":["App.js","services/notes.js","index.js"],"names":["globalErrorFunc","errorIsHappening","baseUrl","axios","get","newObject","post","id","put","delete","PersonForm","props","newName","newNumber","persons","setPersons","setNewName","setNewNumber","UInollaus","RefreshPersons","onSubmit","event","preventDefault","personObject","name","number","personIndex","map","person","indexOf","noteService","then","catch","error","response","data","window","confirm","value","onChange","target","type","PrintPerson","onClick","Persons","searchString","filter","toUpperCase","search","key","Filter","setSearchString","setFunc","ErrorMessages","message","setTimeout","errorStyle","mauste","className","App","useState","errorMesasge","setErrorMessage","useEffect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a9dc59b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport noteService from './services/notes'\n\nconst PersonForm = (props) => {\n  let newName = props.newName\n  let newNumber = props.newNumber\n  let persons = props.persons\n  \n  let setPersons   = props.setPersons\n  let setNewName   = props.setNewName\n  let setNewNumber = props.setNewNumber\n\n  const UInollaus = () => {\n    setNewName('')\n    setNewNumber('')\n    RefreshPersons(setPersons)\n  }\n\n  const addPerson = (event) =>{\n    event.preventDefault()\n    const personObject = {\n        name:newName,\n        number:newNumber\n    }\n    let personIndex = persons.map(person=>person.name).indexOf(newName)\n    if( personIndex === -1 && newName !== ''){\n        noteService\n          .create(personObject)\n          .then( () => {\n            UInollaus()\n            errorIsHappening=0\n            globalErrorFunc(`Added ${newName}`)\n          }).catch(error=>{\n            errorIsHappening=1\n            globalErrorFunc(error.response.data.error)\n          })\n    }else{\n        if(newName===''){\n          errorIsHappening=1\n          globalErrorFunc('Namefield is empty!')\n        }else if( persons[personIndex].number === newNumber ){\n          //alert(`${newName} is already added to phonebook`)\n          errorIsHappening=1\n          globalErrorFunc(`${newName} is already added to phonebook`)\n          setNewName('')\n          setNewNumber('')\n        }else{\n          errorIsHappening=0\n          if( window.confirm(`${newName} numero p√§ivitet√§√§n -> ${newNumber}`) ){\n            noteService\n            .update( persons[personIndex].id, personObject )\n            .then( () => {\n              UInollaus()\n            })\n            errorIsHappening=0\n            globalErrorFunc(`The number of ${newName} has been updated`)\n          }\n        }\n    }\n  }\n\n  const handleNameChange = (event) =>{\n    setNewName(event.target.value);\n  }\n\n  const handleNumberChange = (event) =>{\n    setNewNumber(event.target.value);\n  }\n\n  return (\n    <form onSubmit={addPerson}>\n    <div>\n      name: <input value={newName} onChange={handleNameChange} />\n    </div>\n    <div>\n      number: <input value={newNumber} onChange={handleNumberChange} />\n    </div>\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n    </form>\n  )\n}\n\nconst PrintPerson = (props) => {\n  let person = props.person\n  let setPersons = props.setPersons\n\n  const deletionError = () => {\n    errorIsHappening=1;\n    globalErrorFunc(`Information of ${person.name} has already been removed from server`)\n  }\n\n  const deletionSuccess = () => {\n    errorIsHappening=0;\n    globalErrorFunc('Entry removal successful')\n  }\n\n  const deletePerson = () =>{\n    if(window.confirm(`${person.name} poistetaan`))\n    noteService.deleteEntry(person.id)\n      .then( () => {\n        RefreshPersons(setPersons)\n        deletionSuccess() })\n      .catch( () => {\n        RefreshPersons(setPersons)\n        deletionError()\n      })\n  }\n  return(\n    <>\n    <li>\n      {person.name} {person.number}\n      <button onClick={deletePerson}>\n        delete\n      </button>\n    </li>\n    </>\n  )\n}\n\nconst Persons = (props) => {\n    const persons = props.persons\n    const searchString = props.searchString\n    const setPersons = props.setPersons\n    return (\n        <>\n        {persons.filter(person=>person.name.toUpperCase().search(searchString.toUpperCase())===0).map(person=><PrintPerson key={person.id} person={person} setPersons={setPersons}/>)}\n        </>\n    )\n}\n\nconst Filter = (props) => {\n  const handleSearch = (event) =>{\n    props.setSearchString(event.target.value)\n  }\n  return(\n    <div>\n      filter shown with <input value={props.searchString} onChange={handleSearch} />\n    </div>\n  )\n}\n\nconst RefreshPersons = (setFunc) => {\n  noteService.getAll()\n  .then( response => {\n    setFunc(response.data)\n  })\n}\n\nconst ErrorMessages = ({message}) => {\n  if( message === null ){\n    errorIsHappening=0\n    return null\n  }\n  setTimeout( ()=> {\n    globalErrorFunc(null)\n  },3000)\n  let errorStyle=\"nonerror\"\n  let mauste=\"üëç\"\n  if(errorIsHappening){\n    errorStyle=\"error\"\n    mauste=\"Velhomeditaatio\"\n  }\n  return (\n    <div className=\"errorContainer\">\n      <div className={errorStyle}>\n        {message}<br/>\n        {mauste}\n      </div>\n    </div>\n  )\n}\n\nlet globalErrorFunc,errorIsHappening\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ searchString, setSearchString ] = useState('')\n  const [ errorMesasge, setErrorMessage ] = useState(null)\n\n  useEffect( ()=>{\n    RefreshPersons(setPersons)\n  },[])\n\n  globalErrorFunc = setErrorMessage\n\n  return (\n    \n    <div>\n      <ErrorMessages message={errorMesasge}/>\n      <h2>Phonebook</h2>\n      <Filter searchString={searchString} setSearchString={setSearchString} />\n      <h3>Add new</h3>\n      <PersonForm \n        newName   = {newName}\n        newNumber = {newNumber}\n        persons   = {persons}\n        setPersons   = {setPersons}\n        setNewName   = {setNewName}\n        setNewNumber = {setNewNumber}\n      />\n      <h3>Numbers</h3>\n      <Persons persons={persons} searchString={searchString} setPersons={setPersons}/>\n    </div>\n  )\n\n}\n\nexport default App","import axios from 'axios'\n\n//const baseUrl = 'http://localhost:3001/persons'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n    return axios.post(baseUrl, newObject)\n}\n\nconst deleteEntry = id => {\n    return axios.delete(baseUrl+'/'+id)\n}\n\nconst update = (id, newObject) => {\n    return axios.put(baseUrl+'/'+id,newObject)\n}\n\nexport default {\n    getAll: getAll,\n    create: create,\n    update: update,\n    deleteEntry: deleteEntry\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}